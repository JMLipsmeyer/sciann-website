{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SciANN: The python Physics-Informed Library {{autogenerated}}","title":"Home"},{"location":"#sciann-the-python-physics-informed-library","text":"{{autogenerated}}","title":"SciANN: The python Physics-Informed Library"},{"location":"constraints/","text":"Constraints: {{autogenerated}}","title":"Constraints"},{"location":"constraints/#constraints","text":"{{autogenerated}}","title":"Constraints:"},{"location":"functionals/","text":"Functionals A combination of neural network layers form a Functional . Mathematically, a functional is a general mapping from space \\(X\\) into some output space \\(Y\\). Once the parameters of this transformation are found, this mapping is called a function . Functional s are needed to form SciModels . A Functional is a class to form complex architectures (mappings) from inputs ( Variables ) to the outputs. from sciann import Variable, Functional x = Variable('x') y = Variable('y') Fxy = Functional('Fxy', [x, y], hidden_layers=[10, 20, 10], activation='tanh') Functionals can be plotted when a SciModel is formed. A minimum of one Constraint is needed to form the SciModel from sciann.conditions import Data from sciann import SciModel model = SciModel(x, Data(Fxy), plot_to_file='output.png') {{autogenerated}}","title":"Functionals"},{"location":"functionals/#functionals","text":"A combination of neural network layers form a Functional . Mathematically, a functional is a general mapping from space \\(X\\) into some output space \\(Y\\). Once the parameters of this transformation are found, this mapping is called a function . Functional s are needed to form SciModels . A Functional is a class to form complex architectures (mappings) from inputs ( Variables ) to the outputs. from sciann import Variable, Functional x = Variable('x') y = Variable('y') Fxy = Functional('Fxy', [x, y], hidden_layers=[10, 20, 10], activation='tanh') Functionals can be plotted when a SciModel is formed. A minimum of one Constraint is needed to form the SciModel from sciann.conditions import Data from sciann import SciModel model = SciModel(x, Data(Fxy), plot_to_file='output.png') {{autogenerated}}","title":"Functionals"},{"location":"scimodels/","text":"SciModels {{autogenerated}}","title":"SciModels"},{"location":"scimodels/#scimodels","text":"{{autogenerated}}","title":"SciModels"},{"location":"variables/","text":"Variables Variable is a way to to define inputs to the network, very much similar to the Input class in Keras . However, since we need to perform differentiation and other operations on the network, we cannot just use Input . Instead, we need to define the inputs of the network through Variable . For scientific computations, a Variable has only a dimension of 1. Therefore, if you need to have a three-dimensional coordinate inputs, you need to define three variables: from sciann import Variable x = Variable('x') y = Variable('y') z = Variable('z') This is precisely because we need to perform differentiation with respect to (x, y, z). {{autogenerated}}","title":"Variables"},{"location":"variables/#variables","text":"Variable is a way to to define inputs to the network, very much similar to the Input class in Keras . However, since we need to perform differentiation and other operations on the network, we cannot just use Input . Instead, we need to define the inputs of the network through Variable . For scientific computations, a Variable has only a dimension of 1. Therefore, if you need to have a three-dimensional coordinate inputs, you need to define three variables: from sciann import Variable x = Variable('x') y = Variable('y') z = Variable('z') This is precisely because we need to perform differentiation with respect to (x, y, z). {{autogenerated}}","title":"Variables"},{"location":"why-use-sciann/","text":"Why use SciANN among all other codes? The main purpose of SciANN is a platform for people with Scientific Computations backgrounds in mind. You will find this code very useful for: Solving ODEs and PDEs using densely connect, complex networks, recurrent networks are on the way. This platform is ready to use for Curve Fitting, Differentiations, Integration, etc. If you have other scientific computations in mind that are not implemented yet, contact us . As an example, let's fit a neural network with three-hidden layers, each with 10 neurons and \\( \\tanh \\) activation function, on data generated from \\( sin(x) \\): import numpy as np from sciann import Variable, Functional, SciModel from sciann.conditions import Data # Synthetic data generated from sin function over [0, 2pi] x_true = np.linspace(0, np.pi*2, 10000) y_true = np.sin(x_true) # The network inputs should be defined with Variable. x = Variable('x', dtype='float32') # Each network is defined by Functional. y = Functional('y', x, [10, 10, 10], activation='tanh') # The training data is a condition (constraint) on the model. c1 = Data(y, y_true) # The model is formed with input `x` and condition `c1`. model = SciModel(x, c1) # Training: .solve runs the optimization and finds the parameters. model.solve(x_true, batch_size=32, epochs=100) # used to evaluate the model after the training. y_pred = model.predict(x_true) As you may find, this code takes advantage of Keras great design and takes it to the next level for scientific computations.","title":"Why use SciANN"},{"location":"why-use-sciann/#why-use-sciann-among-all-other-codes","text":"The main purpose of SciANN is a platform for people with Scientific Computations backgrounds in mind. You will find this code very useful for: Solving ODEs and PDEs using densely connect, complex networks, recurrent networks are on the way. This platform is ready to use for Curve Fitting, Differentiations, Integration, etc. If you have other scientific computations in mind that are not implemented yet, contact us . As an example, let's fit a neural network with three-hidden layers, each with 10 neurons and \\( \\tanh \\) activation function, on data generated from \\( sin(x) \\): import numpy as np from sciann import Variable, Functional, SciModel from sciann.conditions import Data # Synthetic data generated from sin function over [0, 2pi] x_true = np.linspace(0, np.pi*2, 10000) y_true = np.sin(x_true) # The network inputs should be defined with Variable. x = Variable('x', dtype='float32') # Each network is defined by Functional. y = Functional('y', x, [10, 10, 10], activation='tanh') # The training data is a condition (constraint) on the model. c1 = Data(y, y_true) # The model is formed with input `x` and condition `c1`. model = SciModel(x, c1) # Training: .solve runs the optimization and finds the parameters. model.solve(x_true, batch_size=32, epochs=100) # used to evaluate the model after the training. y_pred = model.predict(x_true) As you may find, this code takes advantage of Keras great design and takes it to the next level for scientific computations.","title":"Why use SciANN among all other codes?"},{"location":"getting-started/functional-guide/","text":"Using Functional to form complex network architectures The Functional class is designed to allow users to design complex networks with a few lines of code. To use Functional, you can follow the exmaple bellow: import numpy as np from sciann Variable, Functional, SciModel from sciann.conditions Data # Synthetic data to be fitted. x_true = np.linspace(0.0, 2*np.pi, 10000) y_true = np.sin(x_true) # Functional requires input features to be defined through Variable. x = Variable(\"x\", dtype='float32') # A complex network with 5 hidden layers ([5, 10, 20, 10, 5]), # and feature aumentation [x, x**2, x**3, sin(x), cos(x), sinh(x)]. y = Functional( \"y\", [x, x**2, x**3, sin(x), cos(x), sinh(x)], hidden_layers = [5, 10, 20, 10, 5], activations = 'tanh', ) # Define the SciModel. model = SciModel(x, Data(y, y_true)) # Solve the neural network model. model.solve(x_true, epochs=32, batches=10) # Find model's prediciton. x_pred = model.predict(x_true)","title":"Guide to Functional"},{"location":"getting-started/functional-guide/#using-functional-to-form-complex-network-architectures","text":"The Functional class is designed to allow users to design complex networks with a few lines of code. To use Functional, you can follow the exmaple bellow: import numpy as np from sciann Variable, Functional, SciModel from sciann.conditions Data # Synthetic data to be fitted. x_true = np.linspace(0.0, 2*np.pi, 10000) y_true = np.sin(x_true) # Functional requires input features to be defined through Variable. x = Variable(\"x\", dtype='float32') # A complex network with 5 hidden layers ([5, 10, 20, 10, 5]), # and feature aumentation [x, x**2, x**3, sin(x), cos(x), sinh(x)]. y = Functional( \"y\", [x, x**2, x**3, sin(x), cos(x), sinh(x)], hidden_layers = [5, 10, 20, 10, 5], activations = 'tanh', ) # Define the SciModel. model = SciModel(x, Data(y, y_true)) # Solve the neural network model. model.solve(x_true, epochs=32, batches=10) # Find model's prediciton. x_pred = model.predict(x_true)","title":"Using Functional to form complex network architectures"},{"location":"getting-started/scimodel-guide/","text":"Getting started with the SciANN model or SciModel The SciModel is the relation between network inputs, i.e. Variable and network outputs, i.e. Conditions . You can set up a SciModel as simple as the code bellow: from sciann import Variable, Functional, SciModel from sciann.conditions import Data x = Variable(\"x\") y = Functional(\"y\", x) cy = Data(y) model = SciModel(cy)","title":"Guide to SciANN model"},{"location":"getting-started/scimodel-guide/#getting-started-with-the-sciann-model-or-scimodel","text":"The SciModel is the relation between network inputs, i.e. Variable and network outputs, i.e. Conditions . You can set up a SciModel as simple as the code bellow: from sciann import Variable, Functional, SciModel from sciann.conditions import Data x = Variable(\"x\") y = Functional(\"y\", x) cy = Data(y) model = SciModel(cy)","title":"Getting started with the SciANN model or SciModel"}]}