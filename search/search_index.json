{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SciANN: The python Physics-Informed Library {{autogenerated}}","title":"Home"},{"location":"#sciann-the-python-physics-informed-library","text":"{{autogenerated}}","title":"SciANN: The python Physics-Informed Library"},{"location":"why-use-sciann/","text":"Why use SciANN among all other codes? Because it is designed on top of the best, i.e. Keras and Tensorflow.","title":"Why use SciANN"},{"location":"why-use-sciann/#why-use-sciann-among-all-other-codes","text":"Because it is designed on top of the best, i.e. Keras and Tensorflow.","title":"Why use SciANN among all other codes?"},{"location":"getting-started/functional-guide/","text":"Using Functional to form complex network architectures The Functional class is designed to allow users to design complex networks with a few lines of code. To use Functional, you can follow the exmaple bellow: import numpy as np from sciann Variable, Functional, SciModel from sciann.conditions Data # Synthetic data to be fitted. x_true = np.linspace(0.0, 2*np.pi, 10000) y_true = np.sin(x_true) # Functional requires input features to be defined through Variable. x = Variable(\"x\", dtype='float32') # A complex network with 5 hidden layers ([5, 10, 20, 10, 5]), # and feature aumentation [x, x**2, x**3, sin(x), cos(x), sinh(x)]. y = Functional( \"y\", [x, x**2, x**3, sin(x), cos(x), sinh(x)], hidden_layers = [5, 10, 20, 10, 5], activations = 'tanh', ) # Define the SciModel. model = SciModel(x, Data(y, y_true)) # Solve the neural network model. model.solve(x_true, epochs=32, batches=10) # Find model's prediciton. x_pred = model.predict(x_true)","title":"Guide to Functional"},{"location":"getting-started/functional-guide/#using-functional-to-form-complex-network-architectures","text":"The Functional class is designed to allow users to design complex networks with a few lines of code. To use Functional, you can follow the exmaple bellow: import numpy as np from sciann Variable, Functional, SciModel from sciann.conditions Data # Synthetic data to be fitted. x_true = np.linspace(0.0, 2*np.pi, 10000) y_true = np.sin(x_true) # Functional requires input features to be defined through Variable. x = Variable(\"x\", dtype='float32') # A complex network with 5 hidden layers ([5, 10, 20, 10, 5]), # and feature aumentation [x, x**2, x**3, sin(x), cos(x), sinh(x)]. y = Functional( \"y\", [x, x**2, x**3, sin(x), cos(x), sinh(x)], hidden_layers = [5, 10, 20, 10, 5], activations = 'tanh', ) # Define the SciModel. model = SciModel(x, Data(y, y_true)) # Solve the neural network model. model.solve(x_true, epochs=32, batches=10) # Find model's prediciton. x_pred = model.predict(x_true)","title":"Using Functional to form complex network architectures"},{"location":"getting-started/scimodel-guide/","text":"Getting started with the SciANN model or SciModel The SciModel is the relation between network inputs, i.e. Variable and network outputs, i.e. Conditions . You can set up a SciModel as simple as the code bellow: from sciann import Variable, Functional, SciModel from sciann.conditions import Data x = Variable(\"x\") y = Functional(\"y\", x) cy = Data(y) model = SciModel(cy)","title":"Guide to SciANN model"},{"location":"getting-started/scimodel-guide/#getting-started-with-the-sciann-model-or-scimodel","text":"The SciModel is the relation between network inputs, i.e. Variable and network outputs, i.e. Conditions . You can set up a SciModel as simple as the code bellow: from sciann import Variable, Functional, SciModel from sciann.conditions import Data x = Variable(\"x\") y = Functional(\"y\", x) cy = Data(y) model = SciModel(cy)","title":"Getting started with the SciANN model or SciModel"}]}